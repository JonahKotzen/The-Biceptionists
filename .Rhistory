knitr::opts_chunk$set(echo = TRUE)
arm_dat <- read_csv("MP2.csv")
knitr::opts_chunk$set(echo = TRUE)
read.csv()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
arm_dat <- read_csv("MP2.csv")
# Convert cm to m and g to kg
arm_dat <- arm_dat %>%
mutate(
Larm = Larm / 100,
Li = Li / 100,
Lout = Lout/ 100,
Mmuscle = Mmuscle / 1000
)
# Corrected and simplified functions for biomechanical calculations
law_cos <- function(l, r, o) {
theta <- acos((-o^2 + l^2 + r^2) / (2 * l * r))
return(theta)
}
# Corrected law_cos2 function
law_cos2 <- function(l, r, theta) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(theta))
return(o)
}
force_length_factor <- function(Lmuscle, Lmuscler) {
Lopt <- Lmuscler * 0.8
ffl <- -6.25 * (Lmuscle / Lopt)^2 + 12.5 * (Lmuscle / Lopt) - 5.25
return(ffl)
}
calculate_Fmax <- function(Mmuscle, Lmuscler, rho = 0.00105, phi = 0, k = 80) {
PCSA <- (Mmuscle * cos(phi)) / (rho * Lmuscler)
Fmax <- PCSA * k
return(Fmax)
}
model <- function(Mmuscle, Lmuscler, Lmuscle, theta, Li, rho = 0.00105, k = 80) {
# Convert Lmuscler from m to cm for PCSA calculation (as ρ is given in kg/cm^3)
Lmuscler_cm <- Lmuscler * 100
# Assuming phi is 0 as the muscle is nonpennate
phi <- 0
# PCSA calculation
PCSA <- (Mmuscle * cos(phi)) / (rho * Lmuscler_cm)
# Fmax calculation
Fmax <- PCSA * k
# Force-length relationship factor (ffl)
ffl <- force_length_factor(Lmuscle, Lmuscler)
# Muscle force (Fmuscle)
Fmuscle <- Fmax * ffl
# Torque calculation (τmuscle)
tau_muscle <- Fmuscle * sin(theta) * Li
return(tau_muscle)
}
angles_df <- tibble(
flexion_deg = c(50, 75, 100, 125, 150),
flexion_rad = flexion_deg * pi / 180
)
# Perform a Cartesian join to combine all rows of arm_dat with all rows of angles_df
expanded_arm_dat <- arm_dat %>%
expand_grid(angles_df)
arm_dat_expanded <- expanded_arm_dat %>%
rowwise() %>%
mutate(
# Compute current muscle length (Lmuscle) using the law of cosines for each flexion angle
Lmuscle = law_cos2(Li, Larm, flexion_rad),  # Larm could represent Lmuscler, the muscle length at rest
# Compute theta using the law of cosines, considering Lmuscle as 'o', Li as 'l', and Larm as 'r'
theta = law_cos(Li, Larm, Lmuscle),  # Note: Larm here could be Lmuscler if it represents the muscle length at rest
# Compute torque using the muscle model
tau_muscle = model(Mmuscle, Larm, Lmuscle, theta, Li)
) %>%
ungroup()
arm_dat_expanded
# Corrected and simplified functions for biomechanical calculations
law_cos <- function(l, r, o) {
theta <- acos((-o^2 + l^2 + r^2) / (2 * l * r))
return(theta)
}
# Corrected law_cos2 function
law_cos2 <- function(l, r, theta) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(theta))
return(o)
}
force_length_factor <- function(Lmuscle, Lopt) {
ffl <- -6.25 * (Lmuscle / Lopt)^2 + 12.5 * (Lmuscle / Lopt) - 5.25
return(ffl)
}
calculate_Fmax <- function(Mmuscle, Lmuscler, rho = 0.00105, phi = 0, k = 80) {
PCSA <- (Mmuscle * cos(phi)) / (rho * Lmuscler)
Fmax <- PCSA * k
return(Fmax)
}
model <- function(Mmuscle, Lmuscler, Lmuscle, theta, Li, rho = 0.00105, k = 80) {
# Convert Lmuscler from m to cm for PCSA calculation (as ρ is given in kg/cm^3)
Lmuscler_cm <- Lmuscler * 100
# Assuming phi is 0 as the muscle is nonpennate
phi <- 0
# PCSA calculation
PCSA <- (Mmuscle * cos(phi)) / (rho * Lmuscler_cm)
# Fmax calculation
Fmax <- PCSA * k
# Force-length relationship factor (ffl)
ffl <- force_length_factor(Lmuscle, Lmuscler)
# Muscle force (Fmuscle)
Fmuscle <- Fmax * ffl
# Torque calculation (τmuscle)
tau_muscle <- Fmuscle * sin(theta) * Li
return(tau_muscle)
}
angles_df <- tibble(
flexion_deg = c(50, 75, 100, 125, 150),
flexion_rad = flexion_deg * pi / 180
)
expanded_arm_dat <- arm_dat %>%
expand_grid(angles_df)
arm_dat_expanded <- expanded_arm_dat %>%
rowwise() %>%
mutate(
Lmuscle = law_cos2(Li, Larm, flexion_rad),
theta = law_cos(Li, Larm, Lmuscle),
tau_muscle = model(Mmuscle, Larm, Lmuscle, theta, Li)
) %>%
ungroup()
arm_dat_expanded
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
arm_dat <- read_csv("MP2.csv")
# Convert cm to m and g to kg
arm_dat <- arm_dat %>%
mutate(
Larm = Larm / 100,
Li = Li / 100,
Lout = Lout/ 100,
Mmuscle = Mmuscle / 1000
)
# Corrected and simplified functions for biomechanical calculations
law_cos <- function(l, r, o) {
theta <- acos((-o^2 + l^2 + r^2) / (2 * l * r))
return(theta)
}
# Corrected law_cos2 function
law_cos2 <- function(l, r, flexion_rad) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(flexion_rad))
return(o)
}
force_length_factor <- function(Lmuscle, Lmuscler) {
Lopt <- Lmuscler * 0.8
ffl <- -6.25 * (Lmuscle / Lopt)^2 + 12.5 * (Lmuscle / Lopt) - 5.25
return(ffl)
}
calculate_Fmax <- function(Mmuscle, Lmuscler, rho = 0.00105, phi = 0, k = 80) {
PCSA <- (Mmuscle * cos(phi)) / (rho * Lmuscler)
Fmax <- PCSA * k
return(Fmax)
}
model <- function(Mmuscle, Larm, Lmuscle, theta, Li, rho = 0.00105, k = 80) {
# Convert Lmuscler from m to cm for PCSA calculation (as ρ is given in kg/cm^3)
Lmuscler_cm <- (Lmuscler*100)
# Assuming phi is 0 as the muscle is nonpennate
phi <- 0
# PCSA calculation
PCSA <- (Mmuscle * cos(phi)) / (rho * Lmuscler_cm)
# Fmax calculation
Fmax <- PCSA * k
# Force-length relationship factor (ffl)
ffl <- force_length_factor(Lmuscle, Lmuscler)
# Muscle force (Fmuscle)
Fmuscle <- Fmax * ffl
# Torque calculation (τmuscle)
tau_muscle <- Fmuscle * sin(theta) * Li
return(tau_muscle)
}
angles_tibble <- tibble(
flexion_deg = c(50, 75, 100, 125, 150),
flexion_rad = flexion_deg * pi / 180
)
# Assuming g = 9.81 m/s^2
g <- 9.81
# Calculate Lmuscle, theta, muscle_torque, and max_mass for each flexion angle
dat <- arm_dat %>%
cross_join(angles_tibble) %>%
rowwise() %>%
mutate(
Lmuscle = law_cos2(Li, Larm, flexion_rad),
theta = law_cos(Li, Lmuscle, Larm),
muscle_torque = model(Mmuscle, Larm, Lmuscle, theta, Li),
max_mass = muscle_torque / (Lout * g)
) %>%
ungroup()
angles_df <- tibble(
flexion_deg = c(50, 75, 100, 125, 150),
flexion_rad = flexion_deg * pi / 180
)
angles_tibble <- tibble(
flexion_deg = c(50, 75, 100, 125, 150),
flexion_rad = flexion_deg * pi / 180
)
# Assuming g = 9.81 m/s^2
g <- 9.81
angles_tibble <- tibble(
flexion_deg = c(50, 75, 100, 125, 150),
flexion_rad = flexion_deg * pi / 180
)
# Assuming g = 9.81 m/s^2
g <- 9.81
# Calculate Lmuscle, theta, muscle_torque, and max_mass for each flexion angle
dat <- arm_dat %>%
cross_join(angles_tibble) %>%
rowwise() %>%
mutate(
Lmuscle = law_cos2(Li, Larm, flexion_rad),
theta = law_cos(Li, Lmuscle, Larm),
muscle_torque = model(Mmuscle, Larm, Lmuscle, theta, Li),
max_mass = muscle_torque / (Lout * g)
) %>%
ungroup()
# Perform a Cartesian join to combine all rows of arm_dat with all rows of angles_df
expanded_arm_dat <- arm_dat %>%
expand_grid(angles_df)
arm_dat_expanded <- expanded_arm_dat %>%
rowwise() %>%
mutate(
# Compute current muscle length (Lmuscle) using the law of cosines for each flexion angle
Lmuscle = law_cos2(Li, Larm, flexion_rad),  # Larm could represent Lmuscler, the muscle length at rest
# Compute theta using the law of cosines, considering Lmuscle as 'o', Li as 'l', and Larm as 'r'
theta = law_cos(Li, Larm, Lmuscle),  # Note: Larm here could be Lmuscler if it represents the muscle length at rest
# Compute torque using the muscle model
tau_muscle = model(Mmuscle, Larm, Lmuscle, theta, Li)
) %>%
ungroup()
# Plot muscle torque for each flexion angle for each subject
ggplot(dat, aes(x = flexion_deg, y = muscle_torque, group = subject, color = subject)) +
geom_line() +
geom_point() +
labs(title = "Muscle Torque at Each Flexion Angle",
x = "Flexion Angle (degrees)",
y = "Muscle Torque (Nm)")
# Plot muscle torque for each flexion angle for each subject
ggplot(dat, aes(x = flexion_deg, y = muscle_torque, group = subject, color = subject)) +
geom_line() +
geom_point() +
labs(title = "Muscle Torque at Each Flexion Angle",
x = "Flexion Angle (degrees)",
y = "Muscle Torque (Nm)")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
arm_dat <- read_csv("MP2.csv")
# Convert cm to m and g to kg
arm_dat <- arm_dat %>%
mutate(
Larm = Larm / 100,
Li = Li / 100,
Lout = Lout/ 100,
Mmuscle = Mmuscle / 1000
)
# Corrected and simplified functions for biomechanical calculations
law_cos <- function(l, r, o) {
theta <- acos((-o^2 + l^2 + r^2) / (2 * l * r))
return(theta)
}
# Corrected law_cos2 function
law_cos2 <- function(l, r, theta) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(theta))
law_cos2 <- function(l, r, flexion_rad) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(flexion_rad))
return(o)
}
@@ -63,9 +63,9 @@ calculate_Fmax <- function(Mmuscle, Lmuscler, rho = 0.00105, phi = 0, k = 80) {
# Corrected and simplified functions for biomechanical calculations
law_cos <- function(l, r, o) {
theta <- acos((-o^2 + l^2 + r^2) / (2 * l * r))
return(theta)
}
# Corrected law_cos2 function
law_cos2 <- function(l, r, theta) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(theta))
law_cos2 <- function(l, r, flexion_rad) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(flexion_rad))
return(o)
}
-63,9 +63,9 calculate_Fmax <- function(Mmuscle, Lmuscler, rho = 0.00105, phi = 0, k = 80) {
# Corrected and simplified functions for biomechanical calculations
law_cos <- function(l, r, o) {
theta <- acos((-o^2 + l^2 + r^2) / (2 * l * r))
return(theta)
}
# Corrected law_cos2 function
law_cos2 <- function(l, r, flexion_rad) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(flexion_rad))
return(o)
}
## The Model Function
```{r chunk5, include=TRUE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
arm_dat <- read_csv("MP2.csv")
# Convert cm to m and g to kg
arm_dat <- arm_dat %>%
mutate(
Larm = Larm / 100,
Li = Li / 100,
Lout = Lout/ 100,
Mmuscle = Mmuscle / 1000
)
print(arm_dat)
law_cos <- function(l, r, o) {
theta <- acos((-o^2 + l^2 + r^2) / (2 * l * r))
return(theta)
}
law_cos2 <- function(l, r, theta) {
o <- sqrt(l^2 + r^2 - 2 * l * r * cos(theta))
return(o)
}
force_length_factor <- function(Lmuscle, Lmuscler) {
Lopt <- Lmuscler * 0.8
ffl <- -6.25 * (Lmuscle / Lopt)^2 + 12.5 * (Lmuscle / Lopt) - 5.25
return(ffl)
}
calculate_Fmax <- function(Mmuscle, Lmuscler, rho = 0.00105, phi = 0, k = 80) {
PCSA <- (Mmuscle * cos(phi)) / (rho * Lmuscler)
Fmax <- PCSA * k
return(Fmax)
}
model <- function(Mmuscle, Lmuscler, Lmuscle, theta, Li, rho = 0.00105, k = 80) {
# Convert Lmuscler from m to cm for PCSA calculation (as ρ is given in kg/cm^3)
Lmuscler_cm <- Lmuscler * 100
# Assuming phi is 0 as the muscle is nonpennate
phi <- 0
# PCSA calculation
PCSA <- (Mmuscle * cos(phi)) / (rho * Lmuscler_cm)
# Fmax calculation
Fmax <- PCSA * k
# Force-length relationship factor (ffl)
ffl <- force_length_factor(Lmuscle, Lmuscler)
# Muscle force (Fmuscle)
Fmuscle <- Fmax * ffl
# Torque calculation (τmuscle)
tau_muscle <- Fmuscle * sin(theta) * Li
return(tau_muscle)
}
angles_tibble <- tibble(
flexion_deg = c(50, 75, 100, 125, 150),
flexion_rad = flexion_deg * pi / 180
)
# Assuming g = 9.81 m/s^2
g <- 9.81
# Calculate Lmuscle, theta, muscle_torque, and max_mass for each flexion angle
dat1 <- arm_dat %>%
cross_join(angles_tibble) %>%
rowwise() %>%
mutate(
Lmuscle = law_cos2(Li, Larm, flexion_rad),
theta = law_cos(Li, Lmuscle, Larm)) %>%
ungroup()
dat2 <- dat1 %>%
filter (flexion_deg == 150) %>%
mutate(Lmuscler = Lmuscle) %>%
select (subject, Lmuscler)
dat3 <- dat1 %>%
left_join(dat2, by = "subject")
dat_final <- dat3 %>%
mutate(
muscle_torque = model(Mmuscle, Lmuscler, Lmuscle, theta, Li),
max_mass = muscle_torque / (Lout * g)
) %>%
ungroup()
dat <- dat_final %>%
select(subject, flexion_rad, Lmuscle, theta, muscle_torque, max_mass)
print(dat)
# Plot muscle torque for each flexion angle for each subject
ggplot(dat_final, aes(x = flexion_deg, y = muscle_torque, group = subject, color = subject)) +
geom_line() +
geom_point() +
labs(title = "Muscle Torque at Each Flexion Angle",
x = "Flexion Angle (degrees)",
y = "Muscle Torque (Nm)")
# Plot max mass for each flexion angle for each subject
ggplot(dat_final, aes(x = flexion_deg, y = max_mass, group = subject, color = subject)) +
geom_line() +
geom_point() +
labs(title = "Max Mass at Each Flexion Angle",
x = "Flexion Angle (degrees)",
y = "Max Mass (kg)")
